import { type Module, inject } from 'langium';
import { createDefaultModule, createDefaultSharedModule, type DefaultSharedModuleContext, type LangiumServices, type LangiumSharedServices, type PartialLangiumServices } from 'langium/lsp';
import { JobControlLanguageGeneratedModule, JobControlLanguageGeneratedSharedModule } from './generated/module.js';
import { JobControlLanguageValidator, registerValidationChecks } from './job-control-language-validator.js';
import { JclLexer } from '../parser/jcl-parser.js';
import { JclDocumentValidator } from './job-control-language-document-validator.js';
//import { JclNameProvider} from '../references/jcl-name-provider.js';
//import { JclReferences } from '../references/jcl-references.js';
//import { JclScopeComputation } from '../references/jcl-scope-computation.js';
import { JclScopeProvider } from '../references/jcl-scope-provider.js';
import { JclDocumentationProvider } from '../documentation/jcl-documentation-provider.js';
import { JclSemanticTokenProvider } from '../lsp/jcl-semantic-highlighting.js';
import { JclCompletionProvider } from '../lsp/jcl-completion-provider.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type JobControlLanguageAddedServices = {
    validation: {
        JobControlLanguageValidator: JobControlLanguageValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type JobControlLanguageServices = LangiumServices & JobControlLanguageAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const JobControlLanguageModule: Module<JobControlLanguageServices, PartialLangiumServices & JobControlLanguageAddedServices> = {
    documentation: {
        DocumentationProvider: services => new JclDocumentationProvider(services)
    },
    validation: {
        JobControlLanguageValidator: () => new JobControlLanguageValidator(),
        DocumentValidator: services => new JclDocumentValidator(services)
    },
    parser: {
       Lexer: services => new JclLexer(services)
    },
    references: {
        //ScopeComputation: services => new JclScopeComputation(services)
        ScopeProvider: services => new JclScopeProvider(services)
        //NameProvider: () => new JclNameProvider(),
        //References: services => new JclReferences(services)
    },
    lsp: {
        SemanticTokenProvider: services => new JclSemanticTokenProvider(services),
        CompletionProvider: services => new JclCompletionProvider(services)
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createJobControlLanguageServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    JobControlLanguage: JobControlLanguageServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        JobControlLanguageGeneratedSharedModule
    );
    const JobControlLanguage = inject(
        createDefaultModule({ shared }),
        JobControlLanguageGeneratedModule,
        JobControlLanguageModule
    );
    shared.ServiceRegistry.register(JobControlLanguage);
    registerValidationChecks(JobControlLanguage);
    if (!context.connection) {
        // We don't run inside a language server
        // Therefore, initialize the configuration provider instantly
        shared.workspace.ConfigurationProvider.initialized({});
    }
    return { shared, JobControlLanguage };
}
